/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Caja;

import controlador.ControladorPrincipal;
import javax.swing.JOptionPane;
import vista.Servicios.jdialogPagoServicios;
import vista.frmPrincipal;

/**
 *
 * @author juanm
 */
public class ifrmMovimientos extends javax.swing.JInternalFrame {

    ControladorPrincipal cp;
    frmPrincipal vp;

    /**
     * Creates new form ifrmCaja
     */
    public ifrmMovimientos(ControladorPrincipal cp, frmPrincipal vp) {
        initComponents();
        this.cp = cp;
        this.vp = vp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBusqueda = new javax.swing.JPanel();
        tbpProforma = new javax.swing.JTabbedPane();
        pnlCiclo = new javax.swing.JPanel();
        rdbFecha = new javax.swing.JRadioButton();
        dtcFecha = new com.toedter.calendar.JDateChooser();
        rdbMes = new javax.swing.JRadioButton();
        mcrMes = new com.toedter.calendar.JMonthChooser();
        rdbAnio = new javax.swing.JRadioButton();
        ycrAnio = new com.toedter.calendar.JYearChooser();
        btnBuscarCiclo = new javax.swing.JButton();
        sprCiclo = new javax.swing.JSeparator();
        chkTipo = new javax.swing.JCheckBox();
        cmbTipo = new javax.swing.JComboBox<>();
        btnTodosEmpleado = new javax.swing.JButton();
        pnlPeriodo = new javax.swing.JPanel();
        lblDesde = new javax.swing.JLabel();
        lblHasta = new javax.swing.JLabel();
        btnBuscarPeriodo = new javax.swing.JButton();
        dtcDesde = new com.toedter.calendar.JDateChooser();
        dtcHasta = new com.toedter.calendar.JDateChooser();
        pnlCierre = new javax.swing.JPanel();
        lblIngresos = new javax.swing.JLabel();
        txtIngresos = new javax.swing.JTextField();
        lblGastos = new javax.swing.JLabel();
        txtGastos = new javax.swing.JTextField();
        lblCierre = new javax.swing.JLabel();
        txtCierre = new javax.swing.JTextField();
        btnImprimir1 = new javax.swing.JButton();
        scpMovimientos = new javax.swing.JScrollPane();
        tblMovimientos = new javax.swing.JTable();

        setClosable(true);
        setTitle("Movimientos de Caja");
        setFrameIcon(null);

        pnlBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 0, 16))); // NOI18N

        tbpProforma.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tbpProforma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbpProformaMouseClicked(evt);
            }
        });

        rdbFecha.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rdbFecha.setText("Por Fecha");
        rdbFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbFechaActionPerformed(evt);
            }
        });

        dtcFecha.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        dtcFecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dtcFechaKeyTyped(evt);
            }
        });

        rdbMes.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rdbMes.setText("Por Mes");
        rdbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMesActionPerformed(evt);
            }
        });

        mcrMes.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        rdbAnio.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rdbAnio.setText("Por AÃ±o");
        rdbAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbAnioActionPerformed(evt);
            }
        });

        ycrAnio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ycrAnioKeyTyped(evt);
            }
        });

        btnBuscarCiclo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnBuscarCiclo.setText("Buscar");
        btnBuscarCiclo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCicloActionPerformed(evt);
            }
        });

        sprCiclo.setOrientation(javax.swing.SwingConstants.VERTICAL);

        chkTipo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        chkTipo.setText("Tipo");
        chkTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTipoActionPerformed(evt);
            }
        });

        cmbTipo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[SELECCIONAR]", "Gastos", "Ingresos", "Sueldos", "Compras", "Caja Chica", "Servicios" }));

        btnTodosEmpleado.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnTodosEmpleado.setText("Todos");
        btnTodosEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosEmpleadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCicloLayout = new javax.swing.GroupLayout(pnlCiclo);
        pnlCiclo.setLayout(pnlCicloLayout);
        pnlCicloLayout.setHorizontalGroup(
            pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCicloLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbFecha)
                    .addComponent(dtcFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mcrMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbMes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ycrAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbAnio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sprCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCicloLayout.createSequentialGroup()
                        .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                        .addComponent(btnBuscarCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTodosEmpleado))
                    .addGroup(pnlCicloLayout.createSequentialGroup()
                        .addComponent(chkTipo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlCicloLayout.setVerticalGroup(
            pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCicloLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCicloLayout.createSequentialGroup()
                        .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlCicloLayout.createSequentialGroup()
                                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdbFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCicloLayout.createSequentialGroup()
                                .addComponent(chkTipo)
                                .addGap(9, 9, 9)))
                        .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mcrMes, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ycrAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtcFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlCicloLayout.createSequentialGroup()
                        .addComponent(sprCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addContainerGap(7, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCicloLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCicloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTodosEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnBuscarCiclo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tbpProforma.addTab("Por Ciclo", pnlCiclo);

        lblDesde.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblDesde.setText("Desde");

        lblHasta.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lblHasta.setText("Hasta");

        btnBuscarPeriodo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnBuscarPeriodo.setText("Buscar");
        btnBuscarPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPeriodoActionPerformed(evt);
            }
        });

        dtcDesde.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        dtcDesde.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dtcDesdeKeyTyped(evt);
            }
        });

        dtcHasta.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        dtcHasta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dtcHastaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlPeriodoLayout = new javax.swing.GroupLayout(pnlPeriodo);
        pnlPeriodo.setLayout(pnlPeriodoLayout);
        pnlPeriodoLayout.setHorizontalGroup(
            pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPeriodoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtcDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDesde))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHasta)
                    .addComponent(dtcHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                .addComponent(btnBuscarPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlPeriodoLayout.setVerticalGroup(
            pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPeriodoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPeriodoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBuscarPeriodo))
                    .addGroup(pnlPeriodoLayout.createSequentialGroup()
                        .addGroup(pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDesde)
                            .addComponent(lblHasta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtcHasta, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(dtcDesde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(12, 12, 12))
        );

        tbpProforma.addTab("Periodo de Tiempo", pnlPeriodo);

        javax.swing.GroupLayout pnlBusquedaLayout = new javax.swing.GroupLayout(pnlBusqueda);
        pnlBusqueda.setLayout(pnlBusquedaLayout);
        pnlBusquedaLayout.setHorizontalGroup(
            pnlBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbpProforma, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlBusquedaLayout.setVerticalGroup(
            pnlBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBusquedaLayout.createSequentialGroup()
                .addComponent(tbpProforma)
                .addContainerGap())
        );

        lblIngresos.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblIngresos.setText("Ingresos $");

        txtIngresos.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        txtIngresos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIngresos.setText("0");
        txtIngresos.setEnabled(false);

        lblGastos.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblGastos.setText("Gastos $");

        txtGastos.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        txtGastos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtGastos.setText("0");
        txtGastos.setEnabled(false);

        lblCierre.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblCierre.setText("Cierre $");

        txtCierre.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        txtCierre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCierre.setText("0");
        txtCierre.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 51, 204)));
        txtCierre.setEnabled(false);

        btnImprimir1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnImprimir1.setText("Pagar Servicio");
        btnImprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimir1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCierreLayout = new javax.swing.GroupLayout(pnlCierre);
        pnlCierre.setLayout(pnlCierreLayout);
        pnlCierreLayout.setHorizontalGroup(
            pnlCierreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCierreLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImprimir1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblIngresos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblGastos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGastos, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCierre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCierre, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlCierreLayout.setVerticalGroup(
            pnlCierreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCierreLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCierreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGastos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGastos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCierre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCierre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tblMovimientos = new javax.swing.JTable(){
            public boolean isCellEditable(int r, int c){
                return false;
            }
        };
        tblMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Nombre", "Importe"
            }
        ));
        tblMovimientos.getTableHeader().setReorderingAllowed(false);
        scpMovimientos.setViewportView(tblMovimientos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlBusqueda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scpMovimientos, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCierre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpMovimientos, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCierre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdbFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbFechaActionPerformed
        dtcFecha.setEnabled(true);
        mcrMes.setEnabled(false);
        ycrAnio.setEnabled(false);
    }//GEN-LAST:event_rdbFechaActionPerformed

    private void dtcFechaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtcFechaKeyTyped

    }//GEN-LAST:event_dtcFechaKeyTyped

    private void rdbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMesActionPerformed
        dtcFecha.setEnabled(false);
        mcrMes.setEnabled(true);
        ycrAnio.setEnabled(true);
    }//GEN-LAST:event_rdbMesActionPerformed

    private void rdbAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbAnioActionPerformed
        dtcFecha.setEnabled(false);
        mcrMes.setEnabled(false);
        ycrAnio.setEnabled(true);
    }//GEN-LAST:event_rdbAnioActionPerformed

    private void ycrAnioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ycrAnioKeyTyped

    }//GEN-LAST:event_ycrAnioKeyTyped

    private void btnBuscarCicloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCicloActionPerformed
        if (chkTipo.isSelected()) {
            String tipo = String.valueOf(cmbTipo.getSelectedItem());
            if (rdbFecha.isSelected()) {
//                String fecha = formatoFecha(dtcFecha.getDate());
//                System.out.println(fecha);
                switch (tipo) {
                    case "Gastos":
/*
                        double gastos = UtilVista.cargarGastosMov(cp.getCc().traeDetallesComprasPorFecha(fecha),
                        cp.getCs().traerPagosServiciosPorFecha(fecha),
                        cp.getCe().traerSueldosPorFecha(fecha), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(gastos));
                        */
                    break;
                    case "Ingresos":
                        /*
                    double ingresos = UtilVista.cargarIngresosMov(cp.getCpago().traerPagosPorFecha(fecha), tblMovimientos);
                    limpiarLbl();
                    txtIngresos.setText(String.valueOf(ingresos));
*/
                    break;
                    case "Sueldos":/*
                    double sueldos = UtilVista.cargarSueldosMov(cp.getCe().traerSueldosPorFecha(fecha), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(sueldos));
                    */break;
                    case "Compras":/*
                    double comp = UtilVista.cargarComprasMov(cp.getCc().traeDetallesComprasPorFecha(fecha), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(comp));
                    */break;
                    case "Caja Chica":
                   /* double cajaC = UtilVista.cargarCajaChicaMov(cp.getcCaja().traerMovimientosPorFecha(fecha), tblMovimientos);
                    limpiarLbl();
                    txtCierre.setText(String.valueOf(cajaC));
                    */break;
                    case "Servicios":/*
                    double servicios = UtilVista.cargarServiciosMov(cp.getCs().traerPagosServiciosPorFecha(fecha), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(servicios));
                    */break;
                    default:
                    break;
                }
            } else if (rdbMes.isSelected()) {
                String mes = String.valueOf(mcrMes.getMonth() + 1);
                String anio = String.valueOf(ycrAnio.getYear());

                if (mcrMes.getMonth() < 10) {
                    mes = "0" + String.valueOf(mes);
                }
                String fechaBusqueda = anio + "-" + mes;
                switch (tipo) {
                    case "Gastos":/*
                    double gastos = UtilVista.cargarGastosMov(cp.getCc().traeDetallesComprasPorMes(fechaBusqueda),
                        cp.getCs().traerPagosServiciosPorMes(fechaBusqueda),
                        cp.getCe().traerSueldosPorMes(fechaBusqueda), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(gastos));
                    */break;
                    case "Ingresos":/*
                    double ingresos = UtilVista.cargarIngresosMov(cp.getCpago().traerPagosPorMes(fechaBusqueda), tblMovimientos);
                    limpiarLbl();
                    txtIngresos.setText(String.valueOf(ingresos));
                   */ break;
                    case "Sueldos":/*
                    double sueldos = UtilVista.cargarSueldosMov(cp.getCe().traerSueldosPorMes(fechaBusqueda), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(sueldos));
                    */break;
                    case "Compras":/*
                    double comp = UtilVista.cargarComprasMov(cp.getCc().traeDetallesComprasPorMes(fechaBusqueda), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(comp));
                    */break;
                    case "Caja Chica":/*
                    double cajaC = UtilVista.cargarCajaChicaMov(cp.getcCaja().traerMovimientosPorMes(fechaBusqueda), tblMovimientos);
                    limpiarLbl();
                    txtCierre.setText(String.valueOf(cajaC));
                    */break;
                    case "Servicios":/*
                    double servicios = UtilVista.cargarServiciosMov(cp.getCs().traerPagosServiciosPorMes(fechaBusqueda), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(servicios));
                    */break;
                    default:
                    break;
                }
            } else if (rdbAnio.isSelected()) {
                String anio = String.valueOf(ycrAnio.getYear());

                switch (tipo) {
                    case "Gastos":/*
                    double gastos = UtilVista.cargarGastosMov(cp.getCc().traeDetallesComprasPorAnio(anio),
                        cp.getCs().traerPagosServiciosPorAnio(anio),
                        cp.getCe().traerSueldosPorAnio(anio), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(gastos));
                    */break;
                    case "Ingresos":/*
                    double ingresos = UtilVista.cargarIngresosMov(cp.getCpago().traerPagosPorAnio(anio), tblMovimientos);
                    limpiarLbl();
                    txtIngresos.setText(String.valueOf(ingresos));
                    */break;
                    case "Sueldos":/*
                    double sueldos = UtilVista.cargarSueldosMov(cp.getCe().traerSueldosPorAnio(anio), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(sueldos));
                    */break;
                    case "Compras":/*
                    double comp = UtilVista.cargarComprasMov(cp.getCc().traeDetallesComprasPorAnio(anio), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(comp));
                    */break;
                    case "Caja Chica":/*
                    double cajaC = UtilVista.cargarCajaChicaMov(cp.getcCaja().traerMovimientosPorAnio(anio), tblMovimientos);
                    limpiarLbl();
                    txtCierre.setText(String.valueOf(cajaC));
                    */break;
                    case "Servicios":/*
                    double servicios = UtilVista.cargarServiciosMov(cp.getCs().traerPagosServiciosPorAnio(anio), tblMovimientos);
                    limpiarLbl();
                    txtGastos.setText(String.valueOf(servicios));
                    */break;
                    default:
                    break;
                }
            } else {
                if (cmbTipo.getSelectedIndex() != 0) {

                    switch (tipo) {
                        case "Gastos":/*
                        double gastos = UtilVista.cargarGastosMov(cp.getCc().traeDetallesCompras(),
                            cp.getCs().traerPagosServicios(),
                            cp.getCe().traerSueldos(), tblMovimientos);
                        limpiarLbl();
                        txtGastos.setText(String.valueOf(gastos));
                        */break;
                        case "Ingresos":/*
                        double ingresos = UtilVista.cargarIngresosMov(cp.getCpago().traerPagos(), tblMovimientos);
                        limpiarLbl();
                        txtIngresos.setText(String.valueOf(ingresos));
                        */break;
                        case "Sueldos":/*
                        double sueldos = UtilVista.cargarSueldosMov(cp.getCe().traerSueldos(), tblMovimientos);
                        limpiarLbl();
                        txtGastos.setText(String.valueOf(sueldos));
                        */break;
                        case "Compras":/*
                        double comp = UtilVista.cargarComprasMov(cp.getCc().traeDetallesCompras(), tblMovimientos);
                        limpiarLbl();
                        txtGastos.setText(String.valueOf(comp));
                        */break;
                        case "Caja Chica":/*
                        double cajaC = UtilVista.cargarCajaChicaMov(cp.getcCaja().traerMovimientos(), tblMovimientos);
                        limpiarLbl();
                        txtCierre.setText(String.valueOf(cajaC));
                        */break;
                        case "Servicios":/*
                        double servicios = UtilVista.cargarServiciosMov(cp.getCs().traerPagosServicios(), tblMovimientos);
                        limpiarLbl();
                        txtGastos.setText(String.valueOf(servicios));
                        */break;
                        default:
                        break;
                    }
                    //pintarCeldas();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Seleccione un Tipo");
                }
            }
        } else {

            if (rdbFecha.isSelected()) {

                if (dtcFecha.getDate() == null) {
                    JOptionPane.showMessageDialog(null, "No puede haber campos vacÃ­os");
                    dtcFecha.requestFocus();
                } else {
/*
                    String fecha = formatoFecha(dtcFecha.getDate());

                    double[] cierreTotal = UtilVista.cargarTablaMovimientos(cp.getCc().traeDetallesComprasPorFecha(fecha),
                        cp.getCpago().traerPagosPorFecha(fecha),
                        cp.getcCaja().traerMovimientosPorFecha(fecha),
                        cp.getCs().traerPagosServiciosPorFecha(fecha),
                        cp.getCe().traerSueldosPorFecha(fecha), tblMovimientos);
*/
                    
/*
                    if (cierreTotal[0] < 0) {
                        txtCierre.setDisabledTextColor(Color.RED);
                    } else if (cierreTotal[0] > 0) {
                        txtCierre.setDisabledTextColor(Color.GREEN);
                    } else {
                        txtCierre.setDisabledTextColor(Color.BLACK);
                    }

                    txtCierre.setText(String.valueOf(cierreTotal[0]));
                    txtGastos.setText(String.valueOf(cierreTotal[1]));
                    txtIngresos.setText(String.valueOf(cierreTotal[2]));

*/
                }
            } else if (rdbMes.isSelected()) {
                String mes = String.valueOf(mcrMes.getMonth() + 1);
                String anio = String.valueOf(ycrAnio.getYear());

                if (mcrMes.getMonth() < 10) {
                    mes = "0" + String.valueOf(mes);
                }
                String fechaBusqueda = anio + "-" + mes;
/*
                double[] cierreTotal = UtilVista.cargarTablaMovimientos(cp.getCc().traeDetallesComprasPorMes(fechaBusqueda),
                    cp.getCpago().traerPagosPorMes(fechaBusqueda),
                    cp.getcCaja().traerMovimientosPorMes(fechaBusqueda),
                    cp.getCs().traerPagosServiciosPorMes(fechaBusqueda),
                    cp.getCe().traerSueldosPorMes(fechaBusqueda), tblMovimientos);

                if (cierreTotal[0] < 0) {
                    txtCierre.setDisabledTextColor(Color.RED);
                } else if (cierreTotal[0] > 0) {
                    txtCierre.setDisabledTextColor(Color.GREEN);
                } else {
                    txtCierre.setDisabledTextColor(Color.BLACK);
                }

                txtCierre.setText(String.valueOf(cierreTotal[0]));
                txtGastos.setText(String.valueOf(cierreTotal[1]));
                txtIngresos.setText(String.valueOf(cierreTotal[2]));
*/
            } else if (rdbAnio.isSelected()) {
                String anio = String.valueOf(ycrAnio.getYear());

                /*
                double[] cierreTotal = UtilVista.cargarTablaMovimientos(cp.getCc().traeDetallesComprasPorAnio(anio),
                    cp.getCpago().traerPagosPorAnio(anio),
                    cp.getcCaja().traerMovimientosPorAnio(anio),
                    cp.getCs().traerPagosServiciosPorAnio(anio),
                    cp.getCe().traerSueldosPorAnio(anio), tblMovimientos);

                if (cierreTotal[0] < 0) {
                    txtCierre.setDisabledTextColor(Color.RED);
                } else if (cierreTotal[0] > 0) {
                    txtCierre.setDisabledTextColor(Color.GREEN);
                } else {
                    txtCierre.setDisabledTextColor(Color.BLACK);
                }

                txtCierre.setText(String.valueOf(cierreTotal[0]));
                txtGastos.setText(String.valueOf(cierreTotal[1]));
                txtIngresos.setText(String.valueOf(cierreTotal[2]));
                pintarCeldas();
*/
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una tipo de bÃºsqueda");
            }
        }
        //
    }//GEN-LAST:event_btnBuscarCicloActionPerformed

    private void chkTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTipoActionPerformed
        if (chkTipo.isSelected()) {
            cmbTipo.setEnabled(true);
        } else {
            cmbTipo.setEnabled(false);
        }
    }//GEN-LAST:event_chkTipoActionPerformed

    private void btnBuscarPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPeriodoActionPerformed
        if (dtcDesde.getDate() == null || dtcHasta.getDate() == null) {
            JOptionPane.showMessageDialog(null, "No puede haber campos vacÃ­os");
        } else {
//            String desde = formatoFecha(dtcDesde.getDate());
//            String hasta = formatoFecha(dtcHasta.getDate());
/*
            double[] cierreTotal = UtilVista.cargarTablaMovimientos(cp.getCc().traeDetallesComprasPorCiclo(desde, hasta),
                cp.getCpago().traerPagosPorCiclo(desde, hasta),
                cp.getcCaja().traerMovimientosPorCiclo(desde, hasta),
                cp.getCs().traerPagosServiciosPorCiclo(desde, hasta),
                cp.getCe().traerSueldosPorCiclo(desde, hasta), tblMovimientos);

            if (cierreTotal[0] < 0) {
                txtCierre.setDisabledTextColor(Color.RED);
            } else if (cierreTotal[0] > 0) {
                txtCierre.setDisabledTextColor(Color.GREEN);
            } else {
                txtCierre.setDisabledTextColor(Color.BLACK);
            }

            txtCierre.setText(String.valueOf(cierreTotal[0]));
            txtGastos.setText(String.valueOf(cierreTotal[1]));
            txtIngresos.setText(String.valueOf(cierreTotal[2]));
*/
        }
    }//GEN-LAST:event_btnBuscarPeriodoActionPerformed

    private void dtcDesdeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtcDesdeKeyTyped

    }//GEN-LAST:event_dtcDesdeKeyTyped

    private void dtcHastaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtcHastaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_dtcHastaKeyTyped

    private void tbpProformaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbpProformaMouseClicked
        dtcDesde.setCalendar(null);
        dtcHasta.setCalendar(null);
    }//GEN-LAST:event_tbpProformaMouseClicked

    private void btnTodosEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosEmpleadoActionPerformed
        //estadoInicial();
    }//GEN-LAST:event_btnTodosEmpleadoActionPerformed

    private void btnImprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimir1ActionPerformed
        jdialogPagoServicios pagoS = new jdialogPagoServicios(vp, true, cp,  vp);
        pagoS.show();

        //estadoInicial();
    }//GEN-LAST:event_btnImprimir1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarCiclo;
    private javax.swing.JButton btnBuscarPeriodo;
    private javax.swing.JButton btnImprimir1;
    private javax.swing.JButton btnTodosEmpleado;
    private javax.swing.JCheckBox chkTipo;
    private javax.swing.JComboBox<String> cmbTipo;
    private com.toedter.calendar.JDateChooser dtcDesde;
    private com.toedter.calendar.JDateChooser dtcFecha;
    private com.toedter.calendar.JDateChooser dtcHasta;
    private javax.swing.JLabel lblCierre;
    private javax.swing.JLabel lblDesde;
    private javax.swing.JLabel lblGastos;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblIngresos;
    private com.toedter.calendar.JMonthChooser mcrMes;
    private javax.swing.JPanel pnlBusqueda;
    private javax.swing.JPanel pnlCiclo;
    private javax.swing.JPanel pnlCierre;
    private javax.swing.JPanel pnlPeriodo;
    private javax.swing.JRadioButton rdbAnio;
    private javax.swing.JRadioButton rdbFecha;
    private javax.swing.JRadioButton rdbMes;
    private javax.swing.JScrollPane scpMovimientos;
    private javax.swing.JSeparator sprCiclo;
    private javax.swing.JTable tblMovimientos;
    private javax.swing.JTabbedPane tbpProforma;
    private javax.swing.JTextField txtCierre;
    private javax.swing.JTextField txtGastos;
    private javax.swing.JTextField txtIngresos;
    private com.toedter.calendar.JYearChooser ycrAnio;
    // End of variables declaration//GEN-END:variables
}
